{
    "contents" : "library(data.table)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggvis)\nlibrary(ggplot2)\nlibrary(magrittr)\nlibrary(scales)\n\ncodigos_primas_cobradas <- c('50101', '52101', '53101', '54101', '54102')\ncodigos_primas_devueltas <- c('30103', '32102', '33102', '34102')\ncodigos_primas <- c(codigos_primas_cobradas ,codigos_primas_devueltas)\n\ncodigos_primas_personas <- c('50101', '30103')\ncodigos_primas_solidarios <- c('52101', '32102')\ncodigos_primas_generales <- c('53101', '33102')\ncodigos_primas_reaseguros <- c('54101', '54102', '34102')\n\ncodigos_siniestros_pagados <- c('30101', '30102', '32101', '33101', '34101')\n\ncodigos_comisiones <- c('30104', '32103', '33103', '34103')\n\ncalcular_area_negocio <- function(codigo_cuenta) {\n  codigo_cuenta <- as.character(codigo_cuenta)\n  resultado <- rep(NA, length(codigo_cuenta))\n  resultado <- ifelse(\n    substr(codigo_cuenta, 1, 2) %in% apply(expand.grid(c(3, 5), c(0, 2, 3, 4)), 1, function(x) paste(x[1], x[2], sep = \"\")),\n    'Seguros',\n    'GestiÃ³n general'\n  )\n  resultado\n}\n\ncalcular_area_seguros <- function(codigo_cuenta, area_negocio) {\n  codigo_cuenta <- as.character(codigo_cuenta)\n  resultado <- rep(NA, length(codigo_cuenta))\n  resultado <- ifelse(area_negocio == 'Seguros' & substr(codigo_cuenta, 2, 2) == '0', 'Personas', resultado)\n  resultado <- ifelse(area_negocio == 'Seguros' & substr(codigo_cuenta, 2, 2) == '2', 'Generales', resultado)\n  resultado <- ifelse(area_negocio == 'Seguros' & substr(codigo_cuenta, 2, 2) == '3', 'Solidarios', resultado)\n  resultado <- ifelse(area_negocio == 'Seguros' & substr(codigo_cuenta, 2, 2) == '4', 'Reaseguros', resultado)\n  # resultado <- factor(resultado, levels = c('Generales', 'Personas', 'Reaseguros', 'Solidarios'))\n  resultado\n}\n\ncalcular_tipo_cuenta <- function(codigo_cuenta) {\n  resultado <- rep(NA, length(codigo_cuenta))\n  resultado <- ifelse(substr(codigo_cuenta, 1, 1) == '2', 'Activos', resultado)\n  resultado <- ifelse(substr(codigo_cuenta, 1, 1) == '3', 'Egresos', resultado)\n  resultado <- ifelse(substr(codigo_cuenta, 1, 1) == '4', 'Pasivos', resultado)\n  resultado <- ifelse(substr(codigo_cuenta, 1, 1) == '5', 'Ingresos', resultado)\n  return(resultado)\n}\n\ncalcular_multiplicador <- function(codigo_cuenta) {\n  codigo_cuenta <- as.character(codigo_cuenta)\n  resultado <- rep(NA, length(codigo_cuenta))\n  resultado <- ifelse(substr(codigo_cuenta, 1, 1) %in% c('2', '5'), 1, -1)\n  resultado\n}\n\ncalcular_tipo_monto <- function(codigo_cuenta) {\n  codigo_cuenta <- as.character(codigo_cuenta)\n  resultado <- rep(NA, length(codigo_cuenta))\n  resultado <- ifelse(codigo_cuenta %in% codigos_primas, 'Primas', resultado)\n  resultado <- ifelse(codigo_cuenta %in% codigos_siniestros_pagados, 'Siniestros Pagados', resultado)\n  resultado <- ifelse(codigo_cuenta %in% codigos_comisiones, 'Comisiones', resultado)\n  resultado\n}\n\ncalcular_nivel <- function(codigo_cuenta) {\n  resultado <- (nchar(codigo_cuenta) - 1) / 2\n\n}\n\n\nclasificar_cuentas <- function(data) {\n\n  data %>%\n    mutate(multiplicador = calcular_multiplicador(codigo_cuenta)) %>%\n    mutate(area_negocio = calcular_area_negocio(codigo_cuenta)) %>%\n    mutate(area_seguros = calcular_area_seguros(codigo_cuenta, area_negocio)) %>%\n    mutate(tipo_monto = calcular_tipo_monto(codigo_cuenta)) %>%\n    mutate(tipo_cuenta = calcular_tipo_cuenta(codigo_cuenta)) %>%\n    mutate(nivel = calcular_nivel(codigo_cuenta))\n}\n\ncorregir_formatos <- function(data) {\n\n  data %>%\n    mutate(mes = as.integer(mes)) %>%\n    mutate(ano = as.integer(ano)) %>%\n    mutate(monto = numerico(corregir_cero(monto), '\\\\.')) %>%\n    mutate(monto = convertir_bsf(monto, ano)) %>%\n    mutate(depreciacion = numerico(corregir_cero(depreciacion), '\\\\.')) %>%\n    mutate(depreciacion = convertir_bsf(depreciacion, ano)) %>%\n    mutate(monto_total = numerico(corregir_cero(monto_total), '\\\\.')) %>%\n    mutate(monto_total = convertir_bsf(monto_total, ano))\n}\n\nconsolidar_ifm <- function(data, codigo_contable, empresas) {\n  data %>%\n    inner_join(codigo_contable, by = 'codigo_cuenta') %>%\n    inner_join(empresas, by = 'codigo_empresa') %>%\n    mutate(monto_neto = monto_total * multiplicador)\n}\n\nranking_primas <- function(data) {\n  primas <- data %>% filter(tipo_monto == 'Primas')\n\n  ranking_global <- primas %>%\n    group_by(empresa) %>%\n    summarise(primas_netas = sum(monto_neto)) %>%\n    ungroup() %>%\n    mutate(ranking = min_rank(-primas_netas)) %>%\n    arrange(desc(primas_netas))\n\n  primas %>%\n    inner_join(ranking_global, by = 'empresa') %>%\n    # mutate(empresa = factor(empresa, levels = ranking_global$empresa)) %>%\n    group_by(ranking, empresa, area_seguros) %>%\n    summarise(primas_netas = sum(monto_neto)) %>%\n    ungroup()\n}\n\nprimas <- function(data) {\n  data %>% filter(tipo_monto == 'Primas')\n}\n\ncargar_archivo <- function(file = file.choose()) {\n  primera_linea = read.table(file, nrows = 1, header = FALSE, sep = ';', dec = '.', colClasses = 'character')\n  if(ncol(primera_linea) == 1) {\n    sep = ','\n  } else {\n    sep = ';'\n  }\n\n  data <- fread(file, header = FALSE, sep = sep, colClasses = 'character') %>%\n    tbl_dt()\n  data\n}\n\nconvertir_bsf <- function(x, ano) {\n  ifelse(ano <= 2007, x / 1000, x)\n}\n\n#### Pasar a otro paquete!! ####\nnumerico <- function(x, dec_origen = ',') {\n  as.numeric(gsub(dec_origen, '.', x))\n}\n\ncorregir_cero <- function(x) {\n  gsub('0\\\\.00\\\\.', '0.00', x)\n}\n",
    "created" : 1456373417550.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1690877948",
    "id" : "457D62A7",
    "lastKnownWriteTime" : 1456366500,
    "path" : "C:/Users/Elwilton/Google Drive/infoSeguros/sudeaseg/funciones.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}